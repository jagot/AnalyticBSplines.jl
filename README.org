#+TITLE: AnalyticBSplines.jl
#+AUTHOR: Stefanos Carlström
#+EMAIL: stefanos.carlstrom@gmail.com

[[https://travis-ci.org/jagot/AnalyticBSplines.jl][https://travis-ci.org/jagot/AnalyticBSplines.jl.svg?branch=master]]
[[https://coveralls.io/github/jagot/AnalyticBSplines.jl?branch=master][https://coveralls.io/repos/github/jagot/AnalyticBSplines.jl/badge.svg?branch=master]]
[[https://codecov.io/gh/jagot/AnalyticBSplines.jl][https://codecov.io/gh/jagot/AnalyticBSplines.jl/branch/master/graph/badge.svg]]

#+PROPERTY: header-args:julia :session *julia-AnalyticBSplines*

Simple library for defining and evaluating B-splines
analytically. Companion package to [[https://github.com/jagot/BSplines.jl][BSplines.jl]].

* Usage
  We first define a knot set (using rationals such that polynomial
  integrals/derivatives will be exact).
  #+BEGIN_SRC julia :exports both :results verbatim
    using AnalyticBSplines
    using BSplines # For knot-sets

    t = LinearKnotSet(3, 0:1//2:2)
  #+END_SRC

  #+RESULTS:
  : LinearKnotSet{Rational{Int64}} of order k=3 on [0//1,2//1] (4 intervals)

  We then generate the basis
  #+BEGIN_SRC julia :exports code :results verbatim
    B = AnalyticBSplines.gen_basis(t)
    B[end]
  #+END_SRC

  #+RESULTS:
  #+begin_example
  6-element Array{PPoly{Rational{Int64}},1}:
   Piecewise polynomial{Rational{Int64}}
   Poly(1//1 - 4//1*x + 4//1*x^2) on Interval[0//1,1//2]                                                                                                                 
   Piecewise polynomial{Rational{Int64}}
   Poly(4//1*x - 6//1*x^2) on Interval[0//1,1//2]
   Poly(2//1 - 4//1*x + 2//1*x^2) on Interval[1//2,1//1]                                                                 
   Piecewise polynomial{Rational{Int64}}
   Poly(2//1*x^2) on Interval[0//1,1//2]
   Poly(-3//2 + 6//1*x - 4//1*x^2) on Interval[1//2,1//1]
   Poly(9//2 - 6//1*x + 2//1*x^2) on Interval[1//1,3//2]                  
   Piecewise polynomial{Rational{Int64}}
   Poly(1//2 - 2//1*x + 2//1*x^2) on Interval[1//2,1//1]
   Poly(-11//2 + 10//1*x - 4//1*x^2) on Interval[1//1,3//2]
   Poly(8//1 - 8//1*x + 2//1*x^2) on Interval[3//2,2//1]
   Piecewise polynomial{Rational{Int64}}
   Poly(2//1 - 4//1*x + 2//1*x^2) on Interval[1//1,3//2]
   Poly(-16//1 + 20//1*x - 6//1*x^2) on Interval[3//2,2//1]                                                       
   Piecewise polynomial{Rational{Int64}}
   Poly(9//1 - 12//1*x + 4//1*x^2) on Interval[3//2,2//1]                                                                                                                
  #+end_example

  We can then easily generate the overlap matrix (or any other
  polynomial scalar operator):

  #+BEGIN_SRC julia :exports both :results verbatim
    scalar_op(B, t)
  #+END_SRC

  #+RESULTS:
  : 4×4 Array{Rational{Int64},2}:
  :  1//10   7//120   1//120   0//1  
  :  7//120  1//6     5//48    1//240
  :  1//120  5//48   11//40   13//120
  :  0//1    1//240  13//120  11//40 

  #+BEGIN_SRC julia :exports both :results verbatim
    derop(B, t, 1)
  #+END_SRC

  #+RESULTS:
  : 4×4 Array{Any,2}:
  :  -1//2    5//12   1//12   0   
  :  -5//12   0//1    3//8   1//24
  :  -1//12  -3//8    0//1   5//12
  :    0     -1//24  -5//12  0//1 

  #+BEGIN_SRC julia :exports both :results verbatim
    derop(B, t, 2)
  #+END_SRC

  #+RESULTS:
  : 4×4 Array{Any,2}:
  :  4//3  -2//1   2//3    0  
  :  2//1  -8//3   1//3   1//3
  :  2//3   1//3  -2//1   2//3
  :   0     1//3   2//3  -2//1

  #+BEGIN_SRC julia :exports both :results verbatim
    derop(B, t, 3)
  #+END_SRC

  #+RESULTS:
  : 4×4 Array{Any,2}:
  :  0  0  0  0
  :  0  0  0  0
  :  0  0  0  0
  :  0  0  0  0
